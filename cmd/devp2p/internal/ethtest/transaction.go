// Copyright 2020 The go-ethereum Authors
// This file is part of the go-ethereum library.
//
// The go-ethereum library is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// The go-ethereum library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with the go-ethereum library. If not, see <http://www.gnu.org/licenses/>.

package ethtest

import (
	"math/big"
	"strings"
	"time"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/cryptod"
	"github.com/ethereum/go-ethereum/internal/utesting"
	"github.com/ethereum/go-ethereum/params"
)

// var faucetAddr = common.HexToAddress("0x71562b71999873DB5b286dF957af199Ec94617F7")
// var faucetKey, _ = crypto.HexToECDSA("b71c71a67e1177ad4e901695e1b4b9ee17ae16c6668d313eac2f96dbcda3f291")
//var faucetKey *cryptod.PrivateKey

// var faucetKeya = cryptod.HexToMLDsa87("142caa872ef9819d5a2c6bcf9b34c87518c13cdf12a518ae2486d7d2a569384e8ce4320e25df67378612e3d63cdaa2006d80f07f00b783fcb04481c9b0adb5e8a6a44788a9f0e78c543627659a46812c8bb3e31e6abf245d6541f5969b811966e3e5bd2a1ebc25a7b9193bd59f23fba0f229e6422242390382031f8ae7fd9a4ae44825d23064214605c09280d1960102406dd9124ea40452d4142cd2020d0ba740a4308851082942b291da1444ca048c1042280913649c8424a2c4880c910d22918160226163124a84062e104020c100321841098416016180704a02126000840921811b252988c29060820c0944609cc22860b68101419180368600402053020e09b485a30831842430e0444d13150a02882503b9500328910b990c4a484ac9c28023b304e048082340644112894c209110316c430489d9368593124d14280a219029014051c2a60402a0855a948c233692d9826c024160e328524bb050dbc461a30889c83020402860499828d2b88cd3b64403a80862400513454d19497189b808c9144a8106695848048c406d8124611ca10d53266a5c407010476809a22999104402c0115b86110aa37020a52cd4b88c82160208b60dd1b685910090a2a4414b1450c2a2504c085020850423298563c440d446014b988d831865d4a430519611582886db20044ac201143420c086111b4331004768514862181106d4a640c946320a4301c3169151188d5c168981a4511187085a020e04b269c232919c24064ac82d921881d9844d98b86d9c9861e0829083386e5100814018849bb464183310213902918609531812cc002c11194c0b4166222601524285db4208012868c02246e184290bc51088320a4bc6251a82110c9788109240d8806c9a1606014312dc28201b2665009131920670823460a1988d88026e5224484a382e43440c59b424023628909245202391cba220da386618018513498e40286484166a60b04d62840518210ee3360842246403900992a68c22a94ca0800590b248d90490d9a089e3443024385188a82014102514818d0a82894344804c1208a2826062c05021198da12090e0a0305a3092cc8229e0366cc1b28c099650e096650c13829c3201a0246e1b94250a80600143485916829cc44dd8b888db444a039801401829e242884996258ab88849b804a218518c9080da3046e0c481192964cba06d14306449c82dd3208c1328924a3290e212491c130ad8a6019342858484688a985162182584144619a528e3364163202d23356dc9288819116dc3881021c34c2048414822461b082602a945c80209d8241123882508856cd2186cda4042a300084c28424304111a214c2124298c303089b62181822cd49421cbb611918264e4103021842cc4c62d643451e1940051185114c709913446d920290c32069a1626a1a6045032869214269c1850141620d39291d81651411602dbc02c5b3862e4a08d239400ca82711aa9255aa8651ba86862266122156c89304008b731c1282020b91040c00c00230092c630081169dc060ec224651c2060811486c9a480a2b009d0b0511b8401501486e4168264a46453144462b680c91882ccc271a3108c63c40800b101a34861e0104ee2208c98466084844582920518297090a26912b070d1962813246922172edb128c8c84091327810c14440a958ce3a24d19b30c02226603c41118022e938200d48629cc360ac2940022928852027100264811a2904ac42ddcc885c1b40c24a344211190d234111c432ad89208013942c9a611d2906493a2308812491943709c222d1bb64da194008c304022b4899cc48d848485e40411032341521270189371922445c8a4691b8724d44822138380492470139010d39404080648d4886020a12163402a0943911a126a61808183c0914a148150108a92384ac4308d0a380cc2924561a46503a86c43c084023486a322609ba645da36485408851c96105c166422408859b630c0922108095222902da0801010828dda8869c192811ca2650b941152308c839870c4402a19c0601026654b3225094984e0368d5b126a03306c812004c8a44980326403c54988440c1910642034081012608a162dc4484481b4812117080340844c94305280480cc78161848ce3a62480304582442ca1244918b84c03986d14a968cc904918c421da1228091929d8b4650a26241a0386f096462e4ca53d02d0e7ca99c1d0e05b8a49a5c481ccb479b2cf434ffc9d0180a07bfdbaf9310dd7673036802d49953eac91f6de5ab16782d52636a8c2945ce6eb66892d260e0e55d3ecbbbffeaf86bfaf728fd30375b8c1fcc52ee327a139c5c9fdad34fe0249c82a3d891639da112193741cd6e8839cabaef276819b54e17461c7c978c3891925d65127bb9a64000387a9456bb7373e5aedc243876f86821314dd7167c494c997cbd268d62d3d8c9245453a9d4888a130ce0ef1ea70e4334657a1bec0500ca7fb85fe03ae943f56a2efbe9f0063d6474114a21b420af86fb60e5aec97fd71664e82b33ede25a1332255568931775e5f4b20b827522b786b933f38873a3497a791998ebba414bf24e202650809db2c5e0dc29f0b79c5661844f832dea2faff172b4743e06049503e26c8fc2dd21edabebcaf5f74dfc40c9dc0b8f96d26edb2adb8d775a6dd6ebd276c703df90729a74bec43398f66ea878d0f2649c84730de9968129c3213139ff0e0f53147208c1ecf9ea8eae820a09bf08f1e333f8a893aac9c85a4aeaf1ada325f0c9fe1fd464dc7a4caf6eab9f085bed67866b867453a8da2d5478caf71dfe5e08259a104ee6b9df99dc23a753ed7223458fa5bb906b8c675987f9769d41786c75a92b1e9bbfea164cfd9ee7bd953d201e870d10d8434d523ff50d4a8b195b44552a1602087e1098cfe3eea119d6a5c5922d24b89a64b3fe8fd1a4c4aa8699cb4d96d48b2ed9217fb6442c0039099a909ca3fedc50973b9ca7a0741f56fde719231ca1cbcec4630ca1f733a5894bc2ab5ebe1217b6e615a63272eab2995d4a824b6d724b50e05f88191e5366ef94634c0b3ee7a966ea029c695c4a5b332dbbd40b22b11b0413ab50768fd64fa49aaca48f811788ea6422406c3d110c2c9e587ff8d61ead3330e905fbee586acad3c5bee8137054e5277fc3a1144cb772b04f9d48acb01f5224e0c56f6ccfc7243d271cc599f5e73a00643810be2899b2d17da092b3f2cb77dfb3f08f96b13295577ff4427f4e6bca64d3fbc19ef6fda32fefb95e38159604522e698046bc13ed958dc3c54c47d074af9fb387a5f5d7138a5ba86b9f9695a8a95449ab22ee056e36127bb7ac02fa2dfb12b372b80ba7eb5ec99ba8668388545f2e409e26c4c1a3d3adffff797ae53bd70c49c9d5e3c056c64fae1de721a703e0b1bfbc6c454d48c6a4b8ee76b5679ff721f5e12e9ac2aaceeac4b935901fd06a6a053ca9b44126caf0d570cf7bef26ce032cbe07b09c1a0bda0660744941d834969ef486afff67b87e50abc78af40babebe35c035894db36ba0f7e9835341ded67ca4bdb3766ecb3616611481faa67f9dc35ca68cd89e6ca0d544dff670daddb419761bc01cecd949ae7757a76e333f8043761f7d3208ffd0d5711f2f9cf95626953f9f4bb2a4caad24cbd247c2b4ecab223e56fa6d701579ae31b402b6f1ce1a73d208651dd9ef9d7fe8f7e8ebc0e2b1876b0b022244096ed61a4ce3156768edf25d70cdece819db0bf54a6d9d0f0ecfb88acda847a0e681d9ac8ca5dfa8ede0aa16c444474d594f1208ed3f68f3e00204d61d96adedc26907ee8692e71f7d58ba31488f8eebd56280c77b374921f832b14961cba32e97c599a7c4d53b0d54211e12cd9fe1f4b4661e5d349a72c7d1b2c08ee3df76f70b9cf7de8ac3da423538cad0b88f0518c383f69a97d4093bed3295152e73fc5000ef8c9ab95a3a86841e77df243543943ca5dd44c4726f9a13dd0054f3d782e35377ee42a84987d90db446ffdf48a4e8728fee039174f1b3dcd224bc4664a1522547ce08c5d316676051152702705a669796bd50156ade3432bbb495ac1c91f9c7dcb996c64a3d7fe960984f8876014e35de88884dae2d5e5f325ae649a7f3838b12031da191a3245d4c4ef96f835ab420df598b9ff284c724df7b270f48f3dbe2425a5151708bae204fede52d665aee865f32b07bb448f7ec7bc858ddcc8fc116ae39c213f7c9507fba71bb93e534dc1c433c62c316e904247e70b7792bc6d5f6749ea019d16b9cabaad79ed30cee0d87a32252eb4a5bfc1b780685a638382ff7fe8afaacb5f6590f2e6b4657d882ecdccabb564a96cbfc203edfd5ecd00cbf41f87dc8fe4a58c36d55e7fa94907ba4c56ce643e2a5961d97728346e49a1b7c13313e3e66bf6f37b8f3422454c0505c17d54c90e64276a39c369dcf15e07d0c8723461e9b8722fcb4fa4fc70dde09a1af911e1a3dfa483077bb13a5a549b683f64ab11d8ff67f2f0c5d634c0682ae5dea831ff46295a86cef73f7fbfb9b965a4fe3067fdee62e4469196ecc971a4e4df52d05206358ff07dd17ddbbbf6c8ca50eab26ca8c54d863a78244545fce62fa5fee14f465410a37037af48523f52589e55137465c6098d1b5cf95ea05e15d949ad186999bf70479ed4880fddc718f8ea4c7ee7ad784d7cec5589a66273368451648eb9244c72f0c2b4e01ee2e89e2472dcfb95c09807cab66e514f19f2b08595cd034918f3b39a364a5a02071ff06e52f5a9fc7626ca54f59da2d43440112d4d2869130140bc4ce7ade1309d633bf343e3e1d160c89d899c2472badcf12429621087a5b69b199c49a7611c350fb936973b9f9fafdb1cfb42da6671b0a14d7389aa846e1babf1e7843a9575cd78de71056990320590bec49c9085a3eb0986b5fa9dc986a01a7cbf01e58f16c01b75feab32ed14e8c4477a4027dfc69aa6450e67ee74a60ec9c0eb52bc34da0d187180bddba8e60f7865fc888a6d4f51bd6f65a90deb6e881e2cd6021648512a81b43b4b65d75d322789c20ddb92355e3056816d975f8d8cf35e393dabf4b551b4166df62d6477fd6fbd5d51934892a278b032b1c8b4146804a998b9a1c1d384257bed597c8c9fa5a5c15c871ea3845c499dff8dc82f88540c23209beee492400c4e42ca5ed929d29f310c713d3fc8362b14e0c09a74a47addf7092af2d443cc049cea1a29e9356c6225b2acfb135cdb0ee98e19864531958234f4d761e8d2df029501d6af98ba7148c7852233e48df8f52d2ab2bed13639d4fcb6bb34b551e9e0b8d96f7bccf2545aabfc528230ce6f0ace47ed09f0729a651a6eba8f4fd25b708e297e571f4671f34f642b5e6d65b8f2847a13de567360948b7fe353028d9e372aace1b8103cd604568546fc817363418b95a9a6c858f4902b827f27f847ad1b85cb4c82e923ba066e622294e5a3a1ddd57cd1ac8f6d8055ef93c7dad96355a1cdfaab12cd8609284cf517174023e9e5920ea48d324195e864c1416fdce236c1cbe0a88770d8f52192b9135e2ee3e18ab2af337fdc3be49c123124170d3ab67e00aaa4a326c74cf275f008cc04f1275806207a2f49e2cbfe57c43fdd2b43914b3e23829fd9c73190ae5115757a113f8cb2fa8dcb781b614317686a7888a3ec085d5c1f1f51670dc005f955da2118050110f3f225917fdf07e13895dd6ee3e5adebdd5f9bc7de3efaecb73e784ff9b7bf65576a85f87cab77e7f723b5e51a141ba03ac6e57113e0a5f515823fc21663a5aafde2ab68f20e16c5361694599cce0ca59e99a2d117836fe171d7796d9f25c0f5aa819a15eea9881e912236a360f3d059761e3051afedfc7e32e561f33e2b6a4284f9b396879d7d60524825f02033b06c36db96219dcffafbf2996e3979c6b7ecabcb2e5035ead3a37f5f1596eebda182852348147cc6d1b6f2f0dde2d70724b09ff45b96338b90d988765e050c5928bae4fd8fb90bf36657f13b81b840b641159b17390ec4709fc16d386f8b8c9ffe1687dd57d4cfbdba11593c9cd9472da817aa3358f86a204264783c6de62d8135532c09e8b89d2b84fd29490a047e5cc8543e6df5d6e6ce264f3ebb16396e29b980f235bde6b44bd4666cf70c3587829b069ec8f15c9255d6015b09c311a0e3c7bd9cb30c6baf1460f47c1d4a45ed1e51e9d6f15cc74583dd0eaadfcbea8f8d3171dc3d1f3a430bd6ed0f4d6f6bd20ee38e7cbb1b231602722965eadbc412fac55d00c395a0205a155d96de315dfc25d212f4e014348de5f8cde4751535cc51da868e226742da7f4f9ac4f4aee67a5a1c3b976a18a54bd440e500694e88ab95efa7f994bb65170d9f197ca46a9707b31803050c7372d7b9cae3928c4ebcb9ede89dd65945eceb72df147a49dd8668ab6cdce99cf81672bac204d615ac7617ac6d302ce61b3682f0d8d3e31c434f1680f7a4fa0fa47fdd816720ef1a0a02900c826a7f2c57a3a76c70d3ba8b9a688d9a780643d614dcc9f44265ce3b3a0082df7963c3dad1acea06b89dff7b5fad96f010db16f485328dcbcb617f0f4c1a9fc1ccc2c91670836529bf216572713879524671730ef4b43623a05c0c2d89353516b9fa8acbe50a30ecde44ea60b7e3e1825f491cf3f8b83744e8990e6924e653a2c61f16a7d36a6f1751e355d538181f0a679d840d52c438eb33b1ee8a474ed5e3bdc85eea117f40e5b0fccdff4e42d33337e18e050eba8e8d3703c122ba46e48a3f4b2a943911e3877490d4fa4f0f30a52d21dc20333feaea8d0c17b3abcd33300f31f216b4fc96039c689c74c5682b78b0db1267f9df0c15186db0a174e77636b76c9cd92ed62829c40f0348c2d58766a455a7e312956781db1208d98b17a0f32f4d136b1bd2637163a9aa4cf7a14beb0274bd90b3ac957")

var faucetKey, _ = cryptod.HexToMLDsa87("142caa872ef9819d5a2c6bcf9b34c87518c13cdf12a518ae2486d7d2a569384e8ce4320e25df67378612e3d63cdaa2006d80f07f00b783fcb04481c9b0adb5e8a6a44788a9f0e78c543627659a46812c8bb3e31e6abf245d6541f5969b811966e3e5bd2a1ebc25a7b9193bd59f23fba0f229e6422242390382031f8ae7fd9a4ae44825d23064214605c09280d1960102406dd9124ea40452d4142cd2020d0ba740a4308851082942b291da1444ca048c1042280913649c8424a2c4880c910d22918160226163124a84062e104020c100321841098416016180704a02126000840921811b252988c29060820c0944609cc22860b68101419180368600402053020e09b485a30831842430e0444d13150a02882503b9500328910b990c4a484ac9c28023b304e048082340644112894c209110316c430489d9368593124d14280a219029014051c2a60402a0855a948c233692d9826c024160e328524bb050dbc461a30889c83020402860499828d2b88cd3b64403a80862400513454d19497189b808c9144a8106695848048c406d8124611ca10d53266a5c407010476809a22999104402c0115b86110aa37020a52cd4b88c82160208b60dd1b685910090a2a4414b1450c2a2504c085020850423298563c440d446014b988d831865d4a430519611582886db20044ac201143420c086111b4331004768514862181106d4a640c946320a4301c3169151188d5c168981a4511187085a020e04b269c232919c24064ac82d921881d9844d98b86d9c9861e0829083386e5100814018849bb464183310213902918609531812cc002c11194c0b4166222601524285db4208012868c02246e184290bc51088320a4bc6251a82110c9788109240d8806c9a1606014312dc28201b2665009131920670823460a1988d88026e5224484a382e43440c59b424023628909245202391cba220da386618018513498e40286484166a60b04d62840518210ee3360842246403900992a68c22a94ca0800590b248d90490d9a089e3443024385188a82014102514818d0a82894344804c1208a2826062c05021198da12090e0a0305a3092cc8229e0366cc1b28c099650e096650c13829c3201a0246e1b94250a80600143485916829cc44dd8b888db444a039801401829e242884996258ab88849b804a218518c9080da3046e0c481192964cba06d14306449c82dd3208c1328924a3290e212491c130ad8a6019342858484688a985162182584144619a528e3364163202d23356dc9288819116dc3881021c34c2048414822461b082602a945c80209d8241123882508856cd2186cda4042a300084c28424304111a214c2124298c303089b62181822cd49421cbb611918264e4103021842cc4c62d643451e1940051185114c709913446d920290c32069a1626a1a6045032869214269c1850141620d39291d81651411602dbc02c5b3862e4a08d239400ca82711aa9255aa8651ba86862266122156c89304008b731c1282020b91040c00c00230092c630081169dc060ec224651c2060811486c9a480a2b009d0b0511b8401501486e4168264a46453144462b680c91882ccc271a3108c63c40800b101a34861e0104ee2208c98466084844582920518297090a26912b070d1962813246922172edb128c8c84091327810c14440a958ce3a24d19b30c02226603c41118022e938200d48629cc360ac2940022928852027100264811a2904ac42ddcc885c1b40c24a344211190d234111c432ad89208013942c9a611d2906493a2308812491943709c222d1bb64da194008c304022b4899cc48d848485e40411032341521270189371922445c8a4691b8724d44822138380492470139010d39404080648d4886020a12163402a0943911a126a61808183c0914a148150108a92384ac4308d0a380cc2924561a46503a86c43c084023486a322609ba645da36485408851c96105c166422408859b630c0922108095222902da0801010828dda8869c192811ca2650b941152308c839870c4402a19c0601026654b3225094984e0368d5b126a03306c812004c8a44980326403c54988440c1910642034081012608a162dc4484481b4812117080340844c94305280480cc78161848ce3a62480304582442ca1244918b84c03986d14a968cc904918c421da1228091929d8b4650a26241a0386f096462e4ca53d02d0e7ca99c1d0e05b8a49a5c481ccb479b2cf434ffc9d0180a07bfdbaf9310dd7673036802d49953eac91f6de5ab16782d52636a8c2945ce6eb66892d260e0e55d3ecbbbffeaf86bfaf728fd30375b8c1fcc52ee327a139c5c9fdad34fe0249c82a3d891639da112193741cd6e8839cabaef276819b54e17461c7c978c3891925d65127bb9a64000387a9456bb7373e5aedc243876f86821314dd7167c494c997cbd268d62d3d8c9245453a9d4888a130ce0ef1ea70e4334657a1bec0500ca7fb85fe03ae943f56a2efbe9f0063d6474114a21b420af86fb60e5aec97fd71664e82b33ede25a1332255568931775e5f4b20b827522b786b933f38873a3497a791998ebba414bf24e202650809db2c5e0dc29f0b79c5661844f832dea2faff172b4743e06049503e26c8fc2dd21edabebcaf5f74dfc40c9dc0b8f96d26edb2adb8d775a6dd6ebd276c703df90729a74bec43398f66ea878d0f2649c84730de9968129c3213139ff0e0f53147208c1ecf9ea8eae820a09bf08f1e333f8a893aac9c85a4aeaf1ada325f0c9fe1fd464dc7a4caf6eab9f085bed67866b867453a8da2d5478caf71dfe5e08259a104ee6b9df99dc23a753ed7223458fa5bb906b8c675987f9769d41786c75a92b1e9bbfea164cfd9ee7bd953d201e870d10d8434d523ff50d4a8b195b44552a1602087e1098cfe3eea119d6a5c5922d24b89a64b3fe8fd1a4c4aa8699cb4d96d48b2ed9217fb6442c0039099a909ca3fedc50973b9ca7a0741f56fde719231ca1cbcec4630ca1f733a5894bc2ab5ebe1217b6e615a63272eab2995d4a824b6d724b50e05f88191e5366ef94634c0b3ee7a966ea029c695c4a5b332dbbd40b22b11b0413ab50768fd64fa49aaca48f811788ea6422406c3d110c2c9e587ff8d61ead3330e905fbee586acad3c5bee8137054e5277fc3a1144cb772b04f9d48acb01f5224e0c56f6ccfc7243d271cc599f5e73a00643810be2899b2d17da092b3f2cb77dfb3f08f96b13295577ff4427f4e6bca64d3fbc19ef6fda32fefb95e38159604522e698046bc13ed958dc3c54c47d074af9fb387a5f5d7138a5ba86b9f9695a8a95449ab22ee056e36127bb7ac02fa2dfb12b372b80ba7eb5ec99ba8668388545f2e409e26c4c1a3d3adffff797ae53bd70c49c9d5e3c056c64fae1de721a703e0b1bfbc6c454d48c6a4b8ee76b5679ff721f5e12e9ac2aaceeac4b935901fd06a6a053ca9b44126caf0d570cf7bef26ce032cbe07b09c1a0bda0660744941d834969ef486afff67b87e50abc78af40babebe35c035894db36ba0f7e9835341ded67ca4bdb3766ecb3616611481faa67f9dc35ca68cd89e6ca0d544dff670daddb419761bc01cecd949ae7757a76e333f8043761f7d3208ffd0d5711f2f9cf95626953f9f4bb2a4caad24cbd247c2b4ecab223e56fa6d701579ae31b402b6f1ce1a73d208651dd9ef9d7fe8f7e8ebc0e2b1876b0b022244096ed61a4ce3156768edf25d70cdece819db0bf54a6d9d0f0ecfb88acda847a0e681d9ac8ca5dfa8ede0aa16c444474d594f1208ed3f68f3e00204d61d96adedc26907ee8692e71f7d58ba31488f8eebd56280c77b374921f832b14961cba32e97c599a7c4d53b0d54211e12cd9fe1f4b4661e5d349a72c7d1b2c08ee3df76f70b9cf7de8ac3da423538cad0b88f0518c383f69a97d4093bed3295152e73fc5000ef8c9ab95a3a86841e77df243543943ca5dd44c4726f9a13dd0054f3d782e35377ee42a84987d90db446ffdf48a4e8728fee039174f1b3dcd224bc4664a1522547ce08c5d316676051152702705a669796bd50156ade3432bbb495ac1c91f9c7dcb996c64a3d7fe960984f8876014e35de88884dae2d5e5f325ae649a7f3838b12031da191a3245d4c4ef96f835ab420df598b9ff284c724df7b270f48f3dbe2425a5151708bae204fede52d665aee865f32b07bb448f7ec7bc858ddcc8fc116ae39c213f7c9507fba71bb93e534dc1c433c62c316e904247e70b7792bc6d5f6749ea019d16b9cabaad79ed30cee0d87a32252eb4a5bfc1b780685a638382ff7fe8afaacb5f6590f2e6b4657d882ecdccabb564a96cbfc203edfd5ecd00cbf41f87dc8fe4a58c36d55e7fa94907ba4c56ce643e2a5961d97728346e49a1b7c13313e3e66bf6f37b8f3422454c0505c17d54c90e64276a39c369dcf15e07d0c8723461e9b8722fcb4fa4fc70dde09a1af911e1a3dfa483077bb13a5a549b683f64ab11d8ff67f2f0c5d634c0682ae5dea831ff46295a86cef73f7fbfb9b965a4fe3067fdee62e4469196ecc971a4e4df52d05206358ff07dd17ddbbbf6c8ca50eab26ca8c54d863a78244545fce62fa5fee14f465410a37037af48523f52589e55137465c6098d1b5cf95ea05e15d949ad186999bf70479ed4880fddc718f8ea4c7ee7ad784d7cec5589a66273368451648eb9244c72f0c2b4e01ee2e89e2472dcfb95c09807cab66e514f19f2b08595cd034918f3b39a364a5a02071ff06e52f5a9fc7626ca54f59da2d43440112d4d2869130140bc4ce7ade1309d633bf343e3e1d160c89d899c2472badcf12429621087a5b69b199c49a7611c350fb936973b9f9fafdb1cfb42da6671b0a14d7389aa846e1babf1e7843a9575cd78de71056990320590bec49c9085a3eb0986b5fa9dc986a01a7cbf01e58f16c01b75feab32ed14e8c4477a4027dfc69aa6450e67ee74a60ec9c0eb52bc34da0d187180bddba8e60f7865fc888a6d4f51bd6f65a90deb6e881e2cd6021648512a81b43b4b65d75d322789c20ddb92355e3056816d975f8d8cf35e393dabf4b551b4166df62d6477fd6fbd5d51934892a278b032b1c8b4146804a998b9a1c1d384257bed597c8c9fa5a5c15c871ea3845c499dff8dc82f88540c23209beee492400c4e42ca5ed929d29f310c713d3fc8362b14e0c09a74a47addf7092af2d443cc049cea1a29e9356c6225b2acfb135cdb0ee98e19864531958234f4d761e8d2df029501d6af98ba7148c7852233e48df8f52d2ab2bed13639d4fcb6bb34b551e9e0b8d96f7bccf2545aabfc528230ce6f0ace47ed09f0729a651a6eba8f4fd25b708e297e571f4671f34f642b5e6d65b8f2847a13de567360948b7fe353028d9e372aace1b8103cd604568546fc817363418b95a9a6c858f4902b827f27f847ad1b85cb4c82e923ba066e622294e5a3a1ddd57cd1ac8f6d8055ef93c7dad96355a1cdfaab12cd8609284cf517174023e9e5920ea48d324195e864c1416fdce236c1cbe0a88770d8f52192b9135e2ee3e18ab2af337fdc3be49c123124170d3ab67e00aaa4a326c74cf275f008cc04f1275806207a2f49e2cbfe57c43fdd2b43914b3e23829fd9c73190ae5115757a113f8cb2fa8dcb781b614317686a7888a3ec085d5c1f1f51670dc005f955da2118050110f3f225917fdf07e13895dd6ee3e5adebdd5f9bc7de3efaecb73e784ff9b7bf65576a85f87cab77e7f723b5e51a141ba03ac6e57113e0a5f515823fc21663a5aafde2ab68f20e16c5361694599cce0ca59e99a2d117836fe171d7796d9f25c0f5aa819a15eea9881e912236a360f3d059761e3051afedfc7e32e561f33e2b6a4284f9b396879d7d60524825f02033b06c36db96219dcffafbf2996e3979c6b7ecabcb2e5035ead3a37f5f1596eebda182852348147cc6d1b6f2f0dde2d70724b09ff45b96338b90d988765e050c5928bae4fd8fb90bf36657f13b81b840b641159b17390ec4709fc16d386f8b8c9ffe1687dd57d4cfbdba11593c9cd9472da817aa3358f86a204264783c6de62d8135532c09e8b89d2b84fd29490a047e5cc8543e6df5d6e6ce264f3ebb16396e29b980f235bde6b44bd4666cf70c3587829b069ec8f15c9255d6015b09c311a0e3c7bd9cb30c6baf1460f47c1d4a45ed1e51e9d6f15cc74583dd0eaadfcbea8f8d3171dc3d1f3a430bd6ed0f4d6f6bd20ee38e7cbb1b231602722965eadbc412fac55d00c395a0205a155d96de315dfc25d212f4e014348de5f8cde4751535cc51da868e226742da7f4f9ac4f4aee67a5a1c3b976a18a54bd440e500694e88ab95efa7f994bb65170d9f197ca46a9707b31803050c7372d7b9cae3928c4ebcb9ede89dd65945eceb72df147a49dd8668ab6cdce99cf81672bac204d615ac7617ac6d302ce61b3682f0d8d3e31c434f1680f7a4fa0fa47fdd816720ef1a0a02900c826a7f2c57a3a76c70d3ba8b9a688d9a780643d614dcc9f44265ce3b3a0082df7963c3dad1acea06b89dff7b5fad96f010db16f485328dcbcb617f0f4c1a9fc1ccc2c91670836529bf216572713879524671730ef4b43623a05c0c2d89353516b9fa8acbe50a30ecde44ea60b7e3e1825f491cf3f8b83744e8990e6924e653a2c61f16a7d36a6f1751e355d538181f0a679d840d52c438eb33b1ee8a474ed5e3bdc85eea117f40e5b0fccdff4e42d33337e18e050eba8e8d3703c122ba46e48a3f4b2a943911e3877490d4fa4f0f30a52d21dc20333feaea8d0c17b3abcd33300f31f216b4fc96039c689c74c5682b78b0db1267f9df0c15186db0a174e77636b76c9cd92ed62829c40f0348c2d58766a455a7e312956781db1208d98b17a0f32f4d136b1bd2637163a9aa4cf7a14beb0274bd90b3ac957")

func sendSuccessfulTx(t *utesting.T, s *Suite, tx *types.Transaction) {
	sendConn := s.setupConnection(t)
	defer sendConn.Close()
	sendSuccessfulTxWithConn(t, s, tx, sendConn)
}

func sendSuccessfulTxWithConn(t *utesting.T, s *Suite, tx *types.Transaction, sendConn *Conn) {
	t.Logf("sending tx: %v %v %v\n", tx.Hash().String(), tx.GasPrice(), tx.Gas())
	// Send the transaction
	if err := sendConn.Write(&Transactions{tx}); err != nil {
		t.Fatal(err)
	}
	// update last nonce seen
	nonce = tx.Nonce()

	recvConn := s.setupConnection(t)
	// Wait for the transaction announcement
	switch msg := recvConn.ReadAndServe(s.chain, timeout).(type) {
	case *Transactions:
		recTxs := *msg
		for _, gotTx := range recTxs {
			if gotTx.Hash() == tx.Hash() {
				// Ok
				return
			}
		}
		t.Fatalf("missing transaction: got %v missing %v", recTxs, tx.Hash())
	case *NewPooledTransactionHashes:
		txHashes := *msg
		for _, gotHash := range txHashes {
			if gotHash == tx.Hash() {
				return
			}
		}
		t.Fatalf("missing transaction announcement: got %v missing %v", txHashes, tx.Hash())
	default:
		t.Fatalf("unexpected message in sendSuccessfulTx: %s", pretty.Sdump(msg))
	}
}

var nonce = uint64(99)

func sendMultipleSuccessfulTxs(t *utesting.T, s *Suite, sendConn *Conn, txs []*types.Transaction) {
	txMsg := Transactions(txs)
	t.Logf("sending %d txs\n", len(txs))

	recvConn := s.setupConnection(t)
	defer recvConn.Close()

	// Send the transactions
	if err := sendConn.Write(&txMsg); err != nil {
		t.Fatal(err)
	}
	// update nonce
	nonce = txs[len(txs)-1].Nonce()
	// Wait for the transaction announcement(s) and make sure all sent txs are being propagated
	recvHashes := make([]common.Hash, 0)
	// all txs should be announced within 3 announcements
	for i := 0; i < 3; i++ {
		switch msg := recvConn.ReadAndServe(s.chain, timeout).(type) {
		case *Transactions:
			for _, tx := range *msg {
				recvHashes = append(recvHashes, tx.Hash())
			}
		case *NewPooledTransactionHashes:
			recvHashes = append(recvHashes, *msg...)
		default:
			if !strings.Contains(pretty.Sdump(msg), "i/o timeout") {
				t.Fatalf("unexpected message while waiting to receive txs: %s", pretty.Sdump(msg))
			}
		}
		// break once all 2000 txs have been received
		if len(recvHashes) == 2000 {
			break
		}
		if len(recvHashes) > 0 {
			_, missingTxs := compareReceivedTxs(recvHashes, txs)
			if len(missingTxs) > 0 {
				continue
			} else {
				t.Logf("successfully received all %d txs", len(txs))
				return
			}
		}
	}
	_, missingTxs := compareReceivedTxs(recvHashes, txs)
	if len(missingTxs) > 0 {
		for _, missing := range missingTxs {
			t.Logf("missing tx: %v", missing.Hash())
		}
		t.Fatalf("missing %d txs", len(missingTxs))
	}
}

func waitForTxPropagation(t *utesting.T, s *Suite, txs []*types.Transaction, recvConn *Conn) {
	// Wait for another transaction announcement
	switch msg := recvConn.ReadAndServe(s.chain, time.Second*8).(type) {
	case *Transactions:
		// check to see if any of the failing txs were in the announcement
		recvTxs := make([]common.Hash, len(*msg))
		for i, recvTx := range *msg {
			recvTxs[i] = recvTx.Hash()
		}
		badTxs, _ := compareReceivedTxs(recvTxs, txs)
		if len(badTxs) > 0 {
			for _, tx := range badTxs {
				t.Logf("received bad tx: %v", tx)
			}
			t.Fatalf("received %d bad txs", len(badTxs))
		}
	case *NewPooledTransactionHashes:
		badTxs, _ := compareReceivedTxs(*msg, txs)
		if len(badTxs) > 0 {
			for _, tx := range badTxs {
				t.Logf("received bad tx: %v", tx)
			}
			t.Fatalf("received %d bad txs", len(badTxs))
		}
	case *Error:
		// Transaction should not be announced -> wait for timeout
		return
	default:
		t.Fatalf("unexpected message in sendFailingTx: %s", pretty.Sdump(msg))
	}
}

// compareReceivedTxs compares the received set of txs against the given set of txs,
// returning both the set received txs that were present within the given txs, and
// the set of txs that were missing from the set of received txs
func compareReceivedTxs(recvTxs []common.Hash, txs []*types.Transaction) (present []*types.Transaction, missing []*types.Transaction) {
	// create a map of the hashes received from node
	recvHashes := make(map[common.Hash]common.Hash)
	for _, hash := range recvTxs {
		recvHashes[hash] = hash
	}

	// collect present txs and missing txs separately
	present = make([]*types.Transaction, 0)
	missing = make([]*types.Transaction, 0)
	for _, tx := range txs {
		if _, exists := recvHashes[tx.Hash()]; exists {
			present = append(present, tx)
		} else {
			missing = append(missing, tx)
		}
	}
	return present, missing
}

func unknownTx(t *utesting.T, s *Suite) *types.Transaction {
	tx := getNextTxFromChain(t, s)
	var to common.Address
	if tx.To() != nil {
		to = *tx.To()
	}
	txNew := types.NewTransaction(tx.Nonce()+1, to, tx.Value(), tx.Gas(), tx.GasPrice(), tx.Data())
	return signWithFaucet(t, s.chain.chainConfig, txNew)
}

func getNextTxFromChain(t *utesting.T, s *Suite) *types.Transaction {
	// Get a new transaction
	var tx *types.Transaction
	for _, blocks := range s.fullChain.blocks[s.chain.Len():] {
		txs := blocks.Transactions()
		if txs.Len() != 0 {
			tx = txs[0]
			break
		}
	}
	if tx == nil {
		t.Fatal("could not find transaction")
	}
	return tx
}

func generateTxs(t *utesting.T, s *Suite, numTxs int) (map[common.Hash]common.Hash, []*types.Transaction) {
	txHashMap := make(map[common.Hash]common.Hash, numTxs)
	txs := make([]*types.Transaction, numTxs)

	nextTx := getNextTxFromChain(t, s)
	gas := nextTx.Gas()

	nonce = nonce + 1
	// generate txs
	for i := 0; i < numTxs; i++ {
		tx := generateTx(t, s.chain.chainConfig, nonce, gas)
		txHashMap[tx.Hash()] = tx.Hash()
		txs[i] = tx
		nonce = nonce + 1
	}
	return txHashMap, txs
}

func generateTx(t *utesting.T, chainConfig *params.ChainConfig, nonce uint64, gas uint64) *types.Transaction {
	var to common.Address
	tx := types.NewTransaction(nonce, to, big.NewInt(1), gas, big.NewInt(1), []byte{})
	return signWithFaucet(t, chainConfig, tx)
}

func getOldTxFromChain(t *utesting.T, s *Suite) *types.Transaction {
	var tx *types.Transaction
	for _, blocks := range s.fullChain.blocks[:s.chain.Len()-1] {
		txs := blocks.Transactions()
		if txs.Len() != 0 {
			tx = txs[0]
			break
		}
	}
	if tx == nil {
		t.Fatal("could not find transaction")
	}
	return tx
}

func invalidNonceTx(t *utesting.T, s *Suite) *types.Transaction {
	tx := getNextTxFromChain(t, s)
	var to common.Address
	if tx.To() != nil {
		to = *tx.To()
	}
	txNew := types.NewTransaction(tx.Nonce()-2, to, tx.Value(), tx.Gas(), tx.GasPrice(), tx.Data())
	return signWithFaucet(t, s.chain.chainConfig, txNew)
}

func hugeAmount(t *utesting.T, s *Suite) *types.Transaction {
	tx := getNextTxFromChain(t, s)
	amount := largeNumber(2)
	var to common.Address
	if tx.To() != nil {
		to = *tx.To()
	}
	txNew := types.NewTransaction(tx.Nonce(), to, amount, tx.Gas(), tx.GasPrice(), tx.Data())
	return signWithFaucet(t, s.chain.chainConfig, txNew)
}

func hugeGasPrice(t *utesting.T, s *Suite) *types.Transaction {
	tx := getNextTxFromChain(t, s)
	gasPrice := largeNumber(2)
	var to common.Address
	if tx.To() != nil {
		to = *tx.To()
	}
	txNew := types.NewTransaction(tx.Nonce(), to, tx.Value(), tx.Gas(), gasPrice, tx.Data())
	return signWithFaucet(t, s.chain.chainConfig, txNew)
}

func hugeData(t *utesting.T, s *Suite) *types.Transaction {
	tx := getNextTxFromChain(t, s)
	var to common.Address
	if tx.To() != nil {
		to = *tx.To()
	}
	txNew := types.NewTransaction(tx.Nonce(), to, tx.Value(), tx.Gas(), tx.GasPrice(), largeBuffer(2))
	return signWithFaucet(t, s.chain.chainConfig, txNew)
}

func signWithFaucet(t *utesting.T, chainConfig *params.ChainConfig, tx *types.Transaction) *types.Transaction {
	signer := types.LatestSigner(chainConfig)
	signedTx, err := types.SignTx(tx, signer, faucetKey)
	if err != nil {
		t.Fatalf("could not sign tx: %v\n", err)
	}
	return signedTx
}
